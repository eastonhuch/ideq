// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// mvnorm
arma::colvec mvnorm(arma::colvec mean, arma::mat Sigma);
RcppExport SEXP _ideq_mvnorm(SEXP meanSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvnorm(mean, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// dstm_discount
List dstm_discount(arma::mat& Y, arma::mat F, arma::mat G, arma::colvec m_0, arma::mat C_0, NumericVector params, const int n_samples, const int p, const bool sample_sigma2, const bool verbose);
RcppExport SEXP _ideq_dstm_discount(SEXP YSEXP, SEXP FSEXP, SEXP GSEXP, SEXP m_0SEXP, SEXP C_0SEXP, SEXP paramsSEXP, SEXP n_samplesSEXP, SEXP pSEXP, SEXP sample_sigma2SEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type m_0(m_0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C_0(C_0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const bool >::type sample_sigma2(sample_sigma2SEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(dstm_discount(Y, F, G, m_0, C_0, params, n_samples, p, sample_sigma2, verbose));
    return rcpp_result_gen;
END_RCPP
}
// dstm_sample_G
List dstm_sample_G(arma::mat& Y, const int n_samples, const int p, const bool verbose, const bool sample_sigma2);
RcppExport SEXP _ideq_dstm_sample_G(SEXP YSEXP, SEXP n_samplesSEXP, SEXP pSEXP, SEXP verboseSEXP, SEXP sample_sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool >::type sample_sigma2(sample_sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(dstm_sample_G(Y, n_samples, p, verbose, sample_sigma2));
    return rcpp_result_gen;
END_RCPP
}
// dstm_AR
List dstm_AR(arma::mat& Y, const int n_samples, const int p, const bool verbose, const bool sample_sigma2);
RcppExport SEXP _ideq_dstm_AR(SEXP YSEXP, SEXP n_samplesSEXP, SEXP pSEXP, SEXP verboseSEXP, SEXP sample_sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool >::type sample_sigma2(sample_sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(dstm_AR(Y, n_samples, p, verbose, sample_sigma2));
    return rcpp_result_gen;
END_RCPP
}
// dstm_IDE
List dstm_IDE();
RcppExport SEXP _ideq_dstm_IDE() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(dstm_IDE());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ideq_mvnorm", (DL_FUNC) &_ideq_mvnorm, 2},
    {"_ideq_dstm_discount", (DL_FUNC) &_ideq_dstm_discount, 10},
    {"_ideq_dstm_sample_G", (DL_FUNC) &_ideq_dstm_sample_G, 5},
    {"_ideq_dstm_AR", (DL_FUNC) &_ideq_dstm_AR, 5},
    {"_ideq_dstm_IDE", (DL_FUNC) &_ideq_dstm_IDE, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_ideq(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
